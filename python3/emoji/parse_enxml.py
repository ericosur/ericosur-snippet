#!/usr/bin/env python3
# coding: utf-8
#
# pylint: disable=import-error
# pylint: disable=wrong-import-position

'''
read en.xml and output to csv
'''

import os
import re
import sys

try:
    from bs4 import BeautifulSoup
except ImportError:
    print('use pip install beautifulsoup4')
    print('use pip install lxml')
    sys.exit(1)

HOME = os.getenv('HOME')
UTILPATH = os.path.join(HOME, 'src/ericosur-snippet/python3')
if os.path.exists(UTILPATH):
    sys.path.insert(0, UTILPATH)

from myutil import read_textfile

# header for generated python file
HEADER='''
# coding: utf-8

"""
emoji table in python dict, generated by parse_enxml.py
"""

# pylint: disable=too-many-lines

EMOJI = {'''


class Solution():
    ''' solution to read en.xml and output as csv-like data '''
    def __init__(self):
        self.content = None
        self.emoji = {}

    @staticmethod
    def to_codepoint(cc: str):
        '''
        cc [in] unicode char
        calling: to_from_u16(chr(0x0001f3c8))
        '''
        ue = cc.encode('unicode-escape').decode('utf-8')
        return ue

    def need_filter(self, k):
        ''' check if this key could be filtered out '''
        if k == "backslash":
            return True
        if "skin_tone" in k:
            return True
        return False

    def make_soup(self) -> None:
        ''' parse xml from content, store into self.emoji '''
        soup = BeautifulSoup(self.content, features='xml')
        t = soup.find('annotations')
        anns = t.find_all('annotation')
        for i in anns:
            if 'type' in i.attrs:
                value = i['cp']
                key = self.normalize(i.text)
                if self.need_filter(key):
                    print(f'filtered: {key}')
                    continue
                if key in self.emoji:
                    print(f"Warn: duplicated key: {key}")
                else:
                    self.emoji[key] = []
                    self.emoji[key].append(value)

    @staticmethod
    def normalize(s: str) -> str:
        ''' substitue space to underscore, and lower case '''
        tmp = s.lower()
        tmp = re.sub(r'[:!+\']', '', tmp)
        tmp = re.sub(' ', '_', tmp)
        return tmp

    @staticmethod
    def value_to_string(v: list) -> list:
        ''' value to string '''
        s = str()
        for i in v:
            s += '"' + i + '"' + ','
        # remove the extra ,
        return s[:-1]

    # ref: https://github.com/carpedm20/emoji/tree/master/utils
    def output_data(self, ofilename) -> None:
        ''' output data '''
        print(f'len: {len(self.emoji)}')
        outfn = ofilename
        with open(outfn, 'wt', encoding='utf8') as f:
            print(HEADER, file=f)
            for _, (k, v) in enumerate(sorted(self.emoji.items())):
                print(f'    \"{k}\": \"{v[0]}\",', file=f)
            print("}", file=f)
        print(f'output to {outfn}')

    def action(self) -> None:
        ''' action '''
        # input en.xml comes with CLDR data files
        # refer to mkcldrtable.sh
        for fn in ['en-basic.xml', 'en-derived.xml']:
            print(f'fn: {fn}')
            self.content = read_textfile(fn)
            # parsing xml and store into list()
            self.make_soup()
        # output the results into emoji table in python
        self.output_data('_emoji.py')

def main():
    ''' main '''
    s = Solution()
    s.action()

if __name__ == '__main__':
    main()
