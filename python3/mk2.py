#!/usr/bin/python3
# coding: utf-8

'''
This script will generate a script which write embedded data into file.
'''

import argparse
import bz2
import base64
from time import time
import os

def gen_script(dfn: str, ofn: str) -> None:
    ''' main '''
    content = None
    start = time()
    with open(dfn, 'rb') as fin:
        content = fin.read()
        print(f'read content len: {len(content)}')
        compressed = bz2.compress(content)
        print(f'compressed len: {len(compressed)}')
        print("compressed type:", type(compressed))
    del content

    b64str = base64.b64encode(compressed).decode('utf-8')
    duration = time() - start

    print(f'b64str len: {len(b64str)}')
    #print("b64str type:", type(b64str))

    embofn = os.path.basename(dfn)
    with open(ofn, 'wt', encoding='utf8') as fobj:
        print('''
#!/usr/bin/python3
# coding: utf-8

""" This script is auto generated by mk-embed-script.py """

import base64
import bz2
import os
import sys

''', file=fobj)
        print(f'ofn = "{embofn}"', file=fobj)
        print('''
if os.path.exists(ofn):
    print("WARN:", ofn, "exists, will skip...")
    sys.exit(1)
''', file=fobj)
        print('''b64str = """''', file=fobj)
        fobj.write(b64str)
        print('''"""
b64bytes = b64str.encode('utf-8')
u64b = base64.b64decode(b64bytes)
uncompress = bz2.decompress(u64b)
print(f'len: {len(uncompress)}')
print("type:", type(uncompress))
with open(ofn, 'wb') as fo:
    fo.write(uncompress)
print('output to:', ofn)
''', file=fobj)

    print('output to:', ofn)

def main():
    ''' main '''
    parser = argparse.ArgumentParser(description='script to generate data embedded script')
    parser.add_argument('-o', '--output', default='write_smt.py',
        help='The output script filename')
    parser.add_argument("-v", "--verbose", action='store_true', default=False,
        help='verbose mode')
    requiredNamed = parser.add_argument_group('required named arguments')
    requiredNamed.add_argument('-d', '--data', required=True,
        help='The data file (compressed file recommended)')

    args = parser.parse_args()

    if args.output:
        print('output:', args.output)
    if args.data:
        print('data:', args.data)

    gen_script(args.data, args.output)

if __name__ == '__main__':
    main()
