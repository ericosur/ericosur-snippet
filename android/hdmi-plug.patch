From 651e286bb32264b650e6adaf84b91b9719043b9a Mon Sep 17 00:00:00 2001
From: Ricky Bhatia <a0866433@ti.com>
Date: Fri, 3 Sep 2010 14:01:53 -0500
Subject: [PATCH] OMAP4:  Updating patches so that we don't change the master
 Intent list

Change-Id: Iaae18e99f0344c2c4214bbadf49acc98957a94e7
WHY:  Keep isolated from Google's master list of Intents
---
 media/java/android/media/AudioService.java         |   18 ++-
 services/java/com/android/server/HDMIObserver.java |  150 ++++++++++++++++++++
 services/java/com/android/server/SystemServer.java |    9 ++
 3 files changed, 176 insertions(+), 1 deletion(-)
 create mode 100644 services/java/com/android/server/HDMIObserver.java

diff --git a/media/java/android/media/AudioService.java b/media/java/android/media/AudioService.java
index 5c278d9..e99edaf 100644
--- a/media/java/android/media/AudioService.java
+++ b/media/java/android/media/AudioService.java
@@ -119,7 +119,7 @@ public class AudioService extends IAudioService.Stub {
     private int mMode;
     private Object mSettingsLock = new Object();
     private boolean mMediaServerOk;
-
+    private static final String ACTION_HDMI_PLUG = "android.intent.action.HDMI_PLUG";
     private SoundPool mSoundPool;
     private Object mSoundEffectsLock = new Object();
     private static final int NUM_SOUNDPOOL_CHANNELS = 4;
@@ -297,6 +297,7 @@ public class AudioService extends IAudioService.Stub {
         // Register for device connection intent broadcasts.
         IntentFilter intentFilter =
                 new IntentFilter(Intent.ACTION_HEADSET_PLUG);
+        intentFilter.addAction(ACTION_HDMI_PLUG);
         intentFilter.addAction(BluetoothA2dp.ACTION_SINK_STATE_CHANGED);
         intentFilter.addAction(BluetoothHeadset.ACTION_STATE_CHANGED);
         intentFilter.addAction(Intent.ACTION_DOCK_EVENT);
@@ -1894,6 +1895,21 @@ public class AudioService extends IAudioService.Stub {
                         mConnectedDevices.put( new Integer(AudioSystem.DEVICE_OUT_WIRED_HEADPHONE), "");
                     }
                 }
+            } else if (SystemProperties.OMAP_ENHANCEMENT && action.equals(ACTION_HDMI_PLUG)) {
+                int state = intent.getIntExtra("state", 0);
+                boolean isConnected = mConnectedDevices.containsKey(AudioSystem.DEVICE_OUT_AUX_DIGITAL);
+
+                if (state == 0 && isConnected) {
+                    AudioSystem.setDeviceConnectionState(AudioSystem.DEVICE_OUT_AUX_DIGITAL,
+                            AudioSystem.DEVICE_STATE_UNAVAILABLE,
+                            "");
+                    mConnectedDevices.remove(AudioSystem.DEVICE_OUT_AUX_DIGITAL);
+                } else if (state == 1 && !isConnected)  {
+                    AudioSystem.setDeviceConnectionState(AudioSystem.DEVICE_OUT_AUX_DIGITAL,
+                            AudioSystem.DEVICE_STATE_AVAILABLE,
+                            "");
+                    mConnectedDevices.put( new Integer(AudioSystem.DEVICE_OUT_AUX_DIGITAL), "");
+                }
             } else if (action.equals(BluetoothHeadset.ACTION_AUDIO_STATE_CHANGED)) {
                 int state = intent.getIntExtra(BluetoothHeadset.EXTRA_AUDIO_STATE,
                                                BluetoothHeadset.STATE_ERROR);
diff --git a/services/java/com/android/server/HDMIObserver.java b/services/java/com/android/server/HDMIObserver.java
new file mode 100644
index 0000000..db57a39
--- /dev/null
+++ b/services/java/com/android/server/HDMIObserver.java
@@ -0,0 +1,150 @@
+/*
+ * Copyright (C) 2008 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.server;
+
+import android.app.ActivityManagerNative;
+import android.content.Context;
+import android.content.Intent;
+import android.os.Handler;
+import android.os.Message;
+import android.os.PowerManager;
+import android.os.PowerManager.WakeLock;
+import android.os.UEventObserver;
+import android.util.Slog;
+import android.media.AudioManager;
+
+import java.io.FileReader;
+import java.io.FileNotFoundException;
+
+/**
+ * <p>HDMIObserver monitors for HDMI connection.
+ */
+class HDMIObserver extends UEventObserver {
+    private static final String TAG = HDMIObserver.class.getSimpleName();
+    private static final boolean LOG = true;
+
+    private static final String HDMI_UEVENT_MATCH = "DEVPATH=/devices/virtual/switch/hdmi";
+    private static final String HDMI_STATE_PATH = "/sys/class/switch/hdmi/state";
+    private static final String HDMI_NAME_PATH = "/sys/class/switch/hdmi/name";
+
+    private int mHDMIState;
+    private int mPrevHDMIState;
+    private String mHDMIName;
+
+    private final Context mContext;
+    private final WakeLock mWakeLock;  // held while there is a pending route change
+
+    private static final String ACTION_HDMI_PLUG = "android.intent.action.HDMI_PLUG";
+
+    public HDMIObserver(Context context) {
+        mContext = context;
+        PowerManager pm = (PowerManager)context.getSystemService(Context.POWER_SERVICE);
+        mWakeLock = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, "HDMIObserver");
+        mWakeLock.setReferenceCounted(false);
+
+        startObserving(HDMI_UEVENT_MATCH);
+
+        init();  // set initial status
+    }
+
+    @Override
+    public void onUEvent(UEventObserver.UEvent event) {
+        if (LOG) Slog.v(TAG, "HDMI UEVENT: " + event.toString());
+
+        try {
+            update(event.get("SWITCH_NAME"), Integer.parseInt(event.get("SWITCH_STATE")));
+        } catch (NumberFormatException e) {
+            Slog.e(TAG, "Could not parse switch state from event " + event);
+        }
+    }
+
+    private synchronized final void init() {
+        char[] buffer = new char[1024];
+
+        String newName = mHDMIName;
+        int newState = mHDMIState;
+        mPrevHDMIState = mHDMIState;
+        try {
+            FileReader file = new FileReader(HDMI_STATE_PATH);
+            int len = file.read(buffer, 0, 1024);
+            newState = Integer.valueOf((new String(buffer, 0, len)).trim());
+
+            file = new FileReader(HDMI_NAME_PATH);
+            len = file.read(buffer, 0, 1024);
+            newName = new String(buffer, 0, len).trim();
+        } catch (FileNotFoundException e) {
+            Slog.w(TAG, "This kernel does not have HDMI support");
+        } catch (Exception e) {
+            Slog.e(TAG, "" , e);
+        }
+
+        update(newName, newState);
+    }
+
+    private synchronized final void update(String newName, int newState) {
+        // Retain only relevant bits
+        int HDMIState = newState;
+        int newOrOld = HDMIState | mHDMIState;
+        int delay = 0;
+        if (((newOrOld & (newOrOld - 1)) != 0)) {
+            return;
+        }
+
+        mHDMIName = newName;
+        mPrevHDMIState = mHDMIState;
+        mHDMIState = HDMIState;
+
+        mWakeLock.acquire();
+        mHandler.sendMessageDelayed(mHandler.obtainMessage(0,
+                                                           mHDMIState,
+                                                           mPrevHDMIState,
+                                                           mHDMIName),
+                                    delay);
+    }
+
+    private synchronized final void sendIntents(int HDMIState, int prevHDMIState, String HDMIName) {
+       int curHDMI = 1;
+       int allHDMI = 1;
+       sendIntent(curHDMI, HDMIState, prevHDMIState, HDMIName);
+    }
+
+    private final void sendIntent(int HDMI, int HDMIState, int prevHDMIState, String HDMIName) {
+        if ((HDMIState & HDMI) != (prevHDMIState & HDMI)) {
+            //  Pack up the values and broadcast them to everyone
+            Intent intent = new Intent(ACTION_HDMI_PLUG);
+            intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY);
+            int state = 0;
+            if ((HDMIState & HDMI) != 0) {
+                state = 1;
+            }
+            intent.putExtra("state", state);
+            intent.putExtra("name", HDMIName);
+
+            if (LOG) Slog.e(TAG, "ACTION_HDMI_PLUG: state: "+state+" name: "+HDMIName);
+            // TODO: Should we require a permission?
+            ActivityManagerNative.broadcastStickyIntent(intent, null);
+        }
+    }
+
+    private final Handler mHandler = new Handler() {
+        @Override
+        public void handleMessage(Message msg) {
+            sendIntents(msg.arg1, msg.arg2, (String)msg.obj);
+            mWakeLock.release();
+        }
+    };
+}
diff --git a/services/java/com/android/server/SystemServer.java b/services/java/com/android/server/SystemServer.java
index 015cc0a..36258df 100644
--- a/services/java/com/android/server/SystemServer.java
+++ b/services/java/com/android/server/SystemServer.java
@@ -102,6 +102,7 @@ class ServerThread extends Thread {
         BluetoothHidService bluetoothHid = null;
         /* TI HID port - end */
         HeadsetObserver headset = null;
+	HDMIObserver hdmi = null;
         DockObserver dock = null;
         UiModeManagerService uiMode = null;
         RecognitionManagerService recognition = null;
@@ -379,6 +380,14 @@ class ServerThread extends Thread {
             }

             try {
+                Slog.i(TAG, "HDMI Observer");
+                // Listen for hdmi changes
+                hdmi = new HDMIObserver(context);
+            } catch (Throwable e) {
+                Slog.e(TAG, "Failure starting HDMIObserver", e);
+            }
+
+            try {
                 Slog.i(TAG, "Dock Observer");
                 // Listen for dock station changes
                 dock = new DockObserver(context, power);
--
1.7.10
