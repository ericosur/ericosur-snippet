#!/usr/bin/perl

#
# take a file list and output digest value into output file
#

use strict;
use Digest::MD5;
use Benchmark ':hireswallclock';

my $ifile = $ARGV[0] || "list.txt";
my $ofile = $ARGV[1] || "md5.txt";
my $count = 0;

sub main()
{
	print STDERR "taking list from: $ifile\n";
	print STDERR "output digest to: $ofile\n";

	if (not -e $ifile)  {
		print STDERR "generate list.txt for the current directory\n";
		system "cmd /c dir /b *.* > list.txt";
	}

	open my $list, $ifile or die;
	open my $ofh, "> $ofile" or die;

	output_banner($ofh);

    my $t0 = new Benchmark;
	while (<$list>)  {
		s/\r|\n//;
		get_md5($_, $ofh);
	}
    my $t1 = new Benchmark;
    my $td = timediff($t1, $t0);
    print STDERR "This action took: ", timestr($td),"\n";
	close $list;

	output_banner($ofh);
    print $ofh "\n# This action took: ", timestr($td),"\n";
	seek $ofh, 1, 0;
	print $ofh " file count = ", $count, "\n";
	print STDERR " file count = ", $count, "\n";
	close $ofh;
}

sub output_banner()
{
	my $of = shift;
	print $of '#' x 32, "\n";
	printf $of "# generated by %s on %s\n", $0, get_date();
}

# md5 hash
sub get_md5()
{
	my $digest;
	my $file = shift;
	my $ofh = shift;

	if (-f $file)  {
		open my $fh, $file;
		binmode($fh);
		$digest = Digest::MD5->new->addfile($fh)->hexdigest;
		close $fh;
		print $ofh "$digest\t$file\n";
		++ $count;
		print STDERR $count, "\r";
	}
}

sub get_date
{
	my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime;
	my $date = sprintf "%04d-%02d-%02d %02d:%02d:%02d",
		$year+1900, $mon + 1, $mday, $hour, $min, $sec;
	#print STDERR "$date\n";
	return $date;
}

main;
