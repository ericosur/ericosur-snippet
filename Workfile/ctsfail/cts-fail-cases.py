#!/usr/bin/env python3
# coding: utf-8
#
# pylint: disable=wrong-import-position
# pylint: disable=line-too-long
#

'''
parse partial _failure.html and generate subplan

reference:
https://source.android.com/docs/compatibility/cts/development
'''

import re
import os
import sys
from urllib.parse import unquote
from datetime import datetime

home = os.getenv('HOME')
sys.path.insert(0, f'{home}/src/gamehack')
from madutils import read_astext, make_soup

def percent_dec(tok: str) -> str:
    ''' decode percent encoded string '''
    return unquote(tok, encoding='utf-8')


class Solution():
    ''' To grep failed test case

    cd android-cts/
    mkdir subplans/
    cp wtf.xml .../subplans/

<?xml version="1.0" encoding="UTF-8"?>
<SubPlan version="2.0">
  <Entry include="cts/tests/app"/>
  <Entry include="cts/tests/graphics/GraphicsTestCases#testDrawText"/>
  <Entry include="cts/tests/notification/NotificationTestCases#testNotification*"/>
  <Entry include="CtsInputTestCases android.input.cts.DrawingTabletTest#testCoordinateMappingOrientation180" />
  <Entry include="CtsInputTestCases android.input.cts.TouchScreenTest#testSingleTouch" />
</SubPlan>

    '''

    html_file = 'test-details.html'
    the_shell = "wtf.xml"

    def __init__(self):
        self.today = datetime.today()
        self.soup = None
        self.fobj = None
        self.module_name = ""
        self.cases = []

    def logd(self, *args, **wargs):
        ''' logd, output to file if available, else to stdout '''
        if self.fobj:
            print(*args, **wargs, file=self.fobj)
        else:
            print(*args, **wargs)

    def find_tds(self):
        ''' find td and list '''
        tds = self.soup.find_all('td')
        print(len(tds))

        for t in tds:
            r = t.get('class')
            if r == "testname":
                self.cases.append(t.string)
            if r == "module":
                #self.logd("module:", t)
                ahref = t.find('a')
                if ahref:
                    n = percent_dec(ahref.get("name"))
                    m = re.match(r'(\S+)\s+(\S+)', n)
                    if m:
                        self.module_name = m[2]

    def show_output(self):
        ''' show output
        '''
        with open(self.the_shell, "wt", encoding='UTF-8') as self.fobj:
            self.logd('<?xml version="1.0" encoding="UTF-8"?>')
            self.logd('<SubPlan version="2.0">')
            self.logd('<!-- This xml is generated by cts-fail-cases.py ')
            self.logd(f'     data from: {self.html_file}')
            self.logd(f'     {self.today}  -->\n')
            for i in self.cases:
                self.logd(f'    <Entry include="{self.module_name} {i}" />')
            self.logd('</SubPlan>')
        print('output to:', self.the_shell)

    def action(self):
        ''' action '''
        text = read_astext(self.html_file)
        self.soup = make_soup(text)
        self.find_tds()
        self.show_output()

    @classmethod
    def run(cls):
        ''' run me '''
        obj = cls()
        obj.action()

def main():
    ''' main '''
    print('=====> Running cts-fail-cases.py')
    Solution.run()

if __name__ == '__main__':
    main()
