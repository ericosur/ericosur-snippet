#!/usr/bin/env python3
#coding: utf-8

'''
from idiom list, and 4 character idioms,
pick idioms which has
零○一二三四五六七八九十拾百佰千仟萬億兆京垓
'''

import re
import sys
from datetime import datetime
from typing import List
from idiom_list import IDIOM_BOPOMOFO as idioms

# pylint: disable=invalid-name
console = None
logd = print
try:
    from rich.console import Console
    console = Console()
    logd = console.log
except ImportError:
    print("[warn] cannot import rich.console")

class GrepNumberInIdioms():
    ''' pick some idioms from list '''
    def __init__(self):
        # idiom with number characters (do_grep.pattern)
        self.numers = []
        # 4-character idioms here
        self.ans = []

    @classmethod
    def run(cls):
        ''' run me '''
        obj = cls()
        obj.action()

    def do_grep(self):
        ''' do grep '''
        pattern = r'.*[零○一二三四五六七八九十拾百佰千仟萬億兆京垓]+.*'
        for i in idioms:
            ph = i[0]
            m = re.match(pattern, ph)
            if m:
                self.numers.append(ph)
                if len(ph)==4:
                    self.ans.append(ph)
        self.ans.sort()

    def output_to_text(self, the_list: List[str], fn: str) -> None:
        ''' output to text, one idiom per line '''
        with open(fn, "wt", encoding="UTF-8") as fobj:
            for i in the_list:
                print(i, file=fobj)
        logd(f'output to: {fn}')

    def output_to_python(self, the_list: List[str], fn: str) -> None:
        ''' output to text, one idiom per line '''
        this_day = datetime.today()
        from_script = sys.argv[0]
        with open(fn, "wt", encoding="UTF-8") as fobj:
            msg = f'''# coding:utf-8
"""
{fn}:
generated by: output_to_python() of {from_script}
date: {this_day}
"""

FROM = "{from_script}"

# pylint: disable=too-many-lines
FourCharIdioms = ['''
            print(msg, file=fobj)
            for i in the_list:
                print(f'    "{i}",', file=fobj)
            print(']', file=fobj)
            msg = '''
if __name__ == "__main__":
    print(f'There are {len(FourCharIdioms)} '
        'four-character idioms in the __FourCharIdioms__')
    print(f'This script is generated by __{FROM}__, provides data only')'''
            print(msg, file=fobj)
        logd(f'output to: {fn}')

    def action(self):
        ''' action '''
        #logd("action...")
        self.do_grep()
        #print(self.ans)
        logd(f'{len(idioms)=}')
        logd(f'{len(self.numers)=}')
        logd(f'{len(self.ans)=}')
        #self.output_to_text(self.ans, "numer.txt")
        self.output_to_python(self.ans, "numer4_idioms.py")

def main():
    ''' main '''
    GrepNumberInIdioms.run()

if __name__ == "__main__":
    main()
